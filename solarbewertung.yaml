###############################################################################
# cloud-solar-risk-index.yaml – Konzept & Berechnung des CLOUD-SOLAR-RISK INDEX
###############################################################################
#
# Konzeptbeschreibung:
#
#   Diese Datei ermittelt einen wichtigen Kennwert, den "Cloud-Solar-Risk-Index" (in %),
#   der als Entscheidungsgrundlage dient, ob elektrische Verbraucher wie z.B.Wärmepumpe (WP)
#   gemäß den aktuellen Wetterbedingungen aktiviert werden sollten. Damit sollen 
#   Phasen bestens ausgenutzter Photovoltaik-Leistung (BKW, max. 800W Einspeisung) erkannt 
#   werden, um einen unnötigen Netzbezug zu vermeiden.
#
# Warum:
#   Die Solarleistung ist stark abhängig von mehreren, wechselwirkenden Faktoren:
#     - **Bewölkungsgrad:** Bestimmt, wieviel direkte Sonneneinstrahlung zur Verfügung steht.
#     - **Windrichtung & -geschwindigkeit:** Beeinflussen, ob Wolken weggetrieben werden 
#       und ob meteorologische Daten von weiter entfernten Standorten an den Einspeisepunkt 
#       herangetragen werden.
#     - **UV-Index:** Gibt einen Hinweis auf die Intensität der Sonneneinstrahlung.
#     - **Sichtweite:** Wird als Bonusfaktor herangezogen – je besser die Sicht, desto klarer 
#       ist die Luft und desto besser wirken sich die Wetterverhältnisse aus.
#     - **Saisonaler Faktor:** Mittels einer Sinusfunktion wird der jahreszeitliche 
#       Verlauf (Winter vs. Sommer) berücksichtigt.
#
# Wieso:
#   - **Mehrere Wetterstationen:** Bewölkungs- und Winddaten von mindestens drei 
#     nahegelegenen Stationsstandorten (Giessen, Bad Nauheim, Waldems-Reinborn) werden 
#     herangezogen. Jede Station wird zunächst unabhängig bewertet.
#   - **Dynamische Windgewichtung:** 
#       - Für jeden Standort wird ein Vektor definiert, der seine relative Position 
#         (Richtung und Entfernung) zu deinem zentralen Einspeisepunkt (Oberkleen) beschreibt.
#       - Die aktuelle Windrichtung wird ebenfalls in einen Vektor umgerechnet. 
#       - Das Dot-Produkt (Kosinus des Winkels zwischen den beiden Vektoren) liefert einen 
#         Relevanzfaktor, der angibt, ob ein Sensorwert in die Berechnung „reinpasst“. Ist der  
#         Wert nahe 1, so wirkt dieser Standort besonders positiv mit; negative Werte werden auf 0 
#         gesetzt, sodass nur förderliche Einflüsse gezählt werden.
#   - **Standortgewichtung inklusive Entfernungsfaktor:** Je weiter entfernt ein Sensor liegt,
#     desto geringer kann dessen Einfluss sein – dieser Effekt wird über die Normierung des 
#     Vektors abgebildet.
#   - **Globale Saisonanpassung:** Ein saisonaler Faktor, abgeleitet aus dem Tag im Jahr,
#     moduliert den finalen WP-Wert, sodass die unterschiedlichen Einstrahlungsbedingungen
#     im Winter und Sommer berücksichtigt werden.
#
# Realistischer Hintergrund:
#   - Typische Bewölkungswerte in Mittelhessen liegen zwischen 0 und 100 %.
#   - Windgeschwindigkeiten werden auf realistische Werte (0–60 m/s) begrenzt – extreme 
#     Werte werden gekappt, damit sie den Durchschnitt nicht verzerren.
#   - Die Sichtweite wird als Bonus eingerechnet: Bei sehr guter Sicht (z. B. ≥ 40 km) ergibt sich 
#     ein Bonus von 1.1, während bei schlechter Sicht der Faktor auf 0.9 sinkt.
#   - Der dynamische Vektoransatz zur Standortgewichtung kombiniert:
#         • Den sensorbezogenen Standortvektor (wie z. B. Giessen: ca. 15 km vom Einspeisepunkt entfernt)
#         • Den Windvektor (aus der aktuellen Windrichtung, 0° = Norden)
#         • Daraus wird der Cosinus des Winkels berechnet – er zeigt, wie „passend“ die 
#           Informationen des Sensors im aktuellen Windfluss sind.
#
# Ausgangsdaten:
#   - Wetterdaten von Giessen, Bad Nauheim und Waldems-Reinborn (DWD Integration): Bewölkungsgrad, 
#     Windgeschwindigkeit, Windrichtung (numerisch und als Text), UV-Index, Sichtweite.
#   - Ein globaler saisonaler Faktor, berechnet über eine Sinusfunktion basierend auf dem Tag im Jahr.
#
# Berechnungen (Schritt-für-Schritt):
#
#   1. WINDRICHTUNG-IN-TEXT:
#      - Umrechnung der numerischen Windrichtung in Himmelsrichtungen (N, NE, E, usw.) für jeden 
#        Standort. Dadurch können spätere Gewichtungen an definierten Richtungen angepasst werden.
#
#   2. GLOBALER SAISONFAKTOR:
#      - Mittels einer Sinusfunktion wird ein Faktor ermittelt, der den natürlichen Übergang zwischen 
#        Winter (niedrigere Solareinstrahlung) und Sommer (höhere Solareinstrahlung) widerspiegelt.
#
#   3. CLOUD-SOLAR-RISK Index PRO STANDORT:
#      - Für Giessen, Bad Nauheim und Waldems werden die Sensorwerte (Bewölkung, UV-Index, Sichtweite)
#        kombiniert, wobei für jeden Parameter zuerst Validierungen erfolgen (z. B. Bereichsprüfung).
#      - Ein Basisfaktor (Gewichtung) wird auf Basis der Windgeschwindigkeit und einer vordefinierten 
#        gewünschten Richtung angepasst – z. B. für Giessen, wenn der Wind aus N/NE/NW kommt, wird der volle 
#        Faktor (1) angesetzt, andernfalls 0,9.
#
#   4. FINALER CLOUD-SOLAR-RISK INDEX :
#      - Die standortbezogenen Werte werden zu einem gewichteten Durchschnitt zusammengeführt.
#      - Neu: Dynamische Standortgewichtung mittels Vektoransatz:
#         • Für jeden Standort wird ein Vektor (basierend auf der Differenz der geografischen 
#           Koordinaten) berechnet. Dabei fließt auch die Entfernung ein (Normierung).
#         • Der aktuelle Wind wird in einen Vektor umgerechnet, und das Dot-Produkt bestimmt den 
#           kosinusbasierten Einfluss (zwischen 0 und 1). Negative Werte werden auf 0 gesetzt.
#         • Die finalen Standortwerte werden anhand dieser Faktoren gewichtet.
#         • Der globale saisonale Faktor wird schließlich noch mit eingerechnet.
#
#   5. ENTSCHEIDUNG:
#      - Basierend auf dem finalen WP-Wert wird eine operative Entscheidung abgeleitet:
#          "JA –" bei sehr günstigen Bedingungen, "MODERAT –" bei bedingt sinnvollen Bedingungen,
#          "NEIN –" bei ungünstigen Einstellungen.
#      - Bei unsicheren Winddaten – also wenn die stationsübergreifende Differenz der
#        numerischen Windrichtungen 30° oder mehr beträgt – wird der finale WP-Wert **um 5 Punkte
#        erhöht**. Da in diesem System höhere CSRI als ungünstiger interpretiert werden, sind
#        unsichere (inkonsistente) Daten somit als ungünstig zu werten. Der Ausdruck "unsicher"
#        wird in der Entscheidungsbeschreibung zusätzlich vermerkt.
#
#
#   6. ENTSCHEIDUNGSBEGRÜNDUNG & WP PARAMETER HINWEIS:
#      - Hier werden zusätzliche Informationen ausgegeben, die den Einfluss der einzelnen Parameter 
#        (Bewölkung, Wind, Sicht) detailliert darstellen.
#      - **Neu:** Die Reihenfolge der Dominanz wird zusätzlich ermittelt, indem die 
#        auf Basis des Vektoransatzes berechneten Einflussfaktoren (Bonuswerte) von Giessen, 
#        Bad Nauheim und Waldems sortiert und ausgegeben werden.
#
#   7. WINDRICHTUNG OBERKLEEN:
#      - Der Durchschnitt der gemessenen Windrichtungen der drei Standorte wird in einen
#        konsolidierten Himmelsrichtungstext (z. B. "N", "NE" usw.) umgerechnet.
#
# Einfluss der Parameter:
#
#   - **Bewölkungsgrad:** Höhere Werte erhöhen den Cloud-Solar-Risk Index, da mehr Wolken die
#     direkte Sonneneinstrahlung blockieren.
#   - **UV-Index:** Ein höherer UV-Wert deutet auf intensivere direkte Sonneneinstrahlung hin; dieser wird 
#     skaliert, sodass er den Basiswert positiv beeinflusst.
#   - **Sichtweite:** Als Bonusfaktor wird eine gute Sicht (höhere Kilometerzahlen) mit einem Faktor 
#     zwischen 1.05 und 1.1 belohnt, schlechte Sicht mit 0.9.
#   - **Winddaten:** 
#       • Windgeschwindigkeit und -richtung bestimmen, ob ein Standortsensor in die finale 
#         Berechnung einfließt. Bei moderatem, günstigen Wind wird der Einfluss voll (Faktor 1)
#         übernommen, bei ungünstiger Windrichtung oder -geschwindigkeit nur mit einem reduzierten 
#         Faktor (0,9) – oder gar 0, wenn der Sensor nicht in Windrichtung liegt.
#       • Dynamische Gewichtung durch den Vektoransatz berücksichtigt, wie stark der jeweilige 
#         Standort in der aktuellen Wetterlage relevant ist.
#   - **Saisonaler Faktor:** Passe den finalen CSRI an die jeweilige Jahreszeit an (z. B. niedrigere 
#     Werte im Winter).
#
#   - **Dominanz der Standorte:**  
#       • Durch die Berechnung der Dot-Produkte der Standortvektoren mit dem Windvektor wird ermittelt,
#         welcher Standort „dominant“ ist – also momentan den größten positiven Einfluss liefert.
#       • Diese Information unterstützt die Überwachung und Fehlersuche, da sie aufzeigt, welcher
#         Sensor aktuell ausschlaggebend ist.
#
###############################################################################


#
# --- Teil 1: WINDRICHTUNG & SAISONFAKTOR ---
#

# 1. WINDRICHTUNG IN TEXT – Giessen
- name: "Giessen Windrichtung Text"
  state: >
    {%- set wd = states('sensor.giessen_windrichtung') | float(0) -%}
    {# Validierung: wd sollte zwischen 0 und 360 liegen #}
    {%- if wd < 0 or wd >= 360 -%}
      N
    {%- elif wd >= 337.5 or wd < 22.5 -%}
      N
    {%- elif wd < 67.5 -%}
      NE
    {%- elif wd < 112.5 -%}
      E
    {%- elif wd < 157.5 -%}
      SE
    {%- elif wd < 202.5 -%}
      S
    {%- elif wd < 247.5 -%}
      SW
    {%- elif wd < 292.5 -%}
      W
    {%- else -%}
      NW
    {%- endif %}

# 2. WINDRICHTUNG IN TEXT – Bad Nauheim
- name: "Bad Nauheim Windrichtung Text"
  state: >
    {%- set wd = states('sensor.bad_nauheim_windrichtung') | float(0) -%}
    {%- if wd < 0 or wd >= 360 -%}
      N
    {%- elif wd >= 337.5 or wd < 22.5 -%}
      N
    {%- elif wd < 67.5 -%}
      NE
    {%- elif wd < 112.5 -%}
      E
    {%- elif wd < 157.5 -%}
      SE
    {%- elif wd < 202.5 -%}
      S
    {%- elif wd < 247.5 -%}
      SW
    {%- elif wd < 292.5 -%}
      W
    {%- else -%}
      NW
    {%- endif %}

# 3. WINDRICHTUNG IN TEXT – Waldems-Reinborn
- name: "Waldems Windrichtung Text"
  state: >
    {%- set wd = states('sensor.waldems_reinborn_windrichtung') | float(0) -%}
    {%- if wd < 0 or wd >= 360 -%}
      N
    {%- elif wd >= 337.5 or wd < 22.5 -%}
      N
    {%- elif wd < 67.5 -%}
      NE
    {%- elif wd < 112.5 -%}
      E
    {%- elif wd < 157.5 -%}
      SE
    {%- elif wd < 202.5 -%}
      S
    {%- elif wd < 247.5 -%}
      SW
    {%- elif wd < 292.5 -%}
      W
    {%- else -%}
      NW
    {%- endif %}

# 4. GLOBALER SAISONFAKTOR
- name: "CSRI Saisonfaktor"
  unit_of_measurement: ""
  state: >
    {%- set day_of_year = now().timetuple().tm_yday -%}
    {%- set pi = 3.14159 -%}
    {%- set angle = (day_of_year - 80) * pi / 181.0 -%}
    {%- set season_factor = ((angle | float | sin) + 1) / 2 -%}
    {{ season_factor | round(2) }}

#
# --- Teil 2: SOLARWAHRSCHEINLICHKEIT PRO STANDORT ---
#
# Hinweis: Validierungen erfolgen auch hier. Für jeden Parameter wird geprüft,
# ob die Werte im plausiblen Bereich liegen; ansonsten werden Standardwerte gesetzt.
#
# 5. CSRI – GIESSEN (inklusive Datenvalidierung, Sichtweitenfaktor, UV-Index)
- name: "CSRI Giessen"
  unit_of_measurement: "%"
  state: >
    {# Bewölkungsgrad validieren (0-100, Standard: 50) #}
    {%- set raw_cloud = states('sensor.giessen_bewolkungsgrad') | float(0) -%}
    {%- if raw_cloud < 0 or raw_cloud > 100 -%}
      {%- set cloud = 50 -%}
    {%- else -%}
      {%- set cloud = raw_cloud -%}
    {%- endif -%}
    
    {# Windgeschwindigkeit validieren (0-60 m/s, Standard: 0) #}
    {%- set raw_wind = states('sensor.giessen_windgeschwindigkeit') | float(0) -%}
    {%- if raw_wind < 0 -%}
      {%- set wind = 0 -%}
    {%- elif raw_wind > 60 -%}
      {%- set wind = 60 -%}
    {%- else -%}
      {%- set wind = raw_wind -%}
    {%- endif -%}
    
    {# UV-Index validieren (0-12, Standard: 5) #}
    {%- set raw_uv = states('sensor.giessen_uv_index') | float(0) -%}
    {%- if raw_uv < 0 or raw_uv > 12 -%}
      {%- set uv_index = 5 -%}
    {%- else -%}
      {%- set uv_index = raw_uv -%}
    {%- endif -%}
    
    {# Sichtweite validieren (Standard: 20 wenn ungültig) #}
    {%- set raw_sicht = states('sensor.giessen_sichtweite') | float(0) -%}
    {%- if raw_sicht <= 0 -%}
      {%- set sicht = 20 -%}
    {%- else -%}
      {%- set sicht = raw_sicht -%}
    {%- endif -%}
    
    {%- set dir_text = states('sensor.giessen_windrichtung_text') | default('') -%}
    {%- set weight = 1 if wind >= 2 and dir_text in ['N','NE','NW'] else 0.9 -%}
    {%- set uv_factor = 0.8 + (uv_index / 10.0) * 0.4 -%}
    {%- if sicht >= 40 -%}
         {%- set sicht_factor = 1.1 -%}
    {%- elif sicht >= 30 -%}
         {%- set sicht_factor = 1.05 -%}
    {%- elif sicht >= 20 -%}
         {%- set sicht_factor = 1.0 -%}
    {%- elif sicht >= 10 -%}
         {%- set sicht_factor = 0.95 -%}
    {%- else -%}
         {%- set sicht_factor = 0.9 -%}
    {%- endif -%}
    {{ (cloud * weight * sicht_factor * uv_factor) | round(0) }}

# 6. CSRI – BAD NAUHEIM (inklusive Datenvalidierung)
- name: "CSRI Bad Nauheim"
  unit_of_measurement: "%"
  state: >
    {%- set raw_cloud = states('sensor.bad_nauheim_bewolkungsgrad') | float(0) -%}
    {%- if raw_cloud < 0 or raw_cloud > 100 -%}
      {%- set cloud = 50 -%}
    {%- else -%}
      {%- set cloud = raw_cloud -%}
    {%- endif -%}
    
    {%- set raw_wind = states('sensor.bad_nauheim_windgeschwindigkeit') | float(0) -%}
    {%- if raw_wind < 0 -%}
      {%- set wind = 0 -%}
    {%- elif raw_wind > 60 -%}
      {%- set wind = 60 -%}
    {%- else -%}
      {%- set wind = raw_wind -%}
    {%- endif -%}
    
    {%- set raw_uv = states('sensor.bad_nauheim_uv_index') | float(0) -%}
    {%- if raw_uv < 0 or raw_uv > 12 -%}
      {%- set uv_index = 5 -%}
    {%- else -%}
      {%- set uv_index = raw_uv -%}
    {%- endif -%}
    
    {%- set raw_sicht = states('sensor.bad_nauheim_sichtweite') | float(0) -%}
    {%- if raw_sicht <= 0 -%}
      {%- set sicht = 20 -%}
    {%- else -%}
      {%- set sicht = raw_sicht -%}
    {%- endif -%}
    
    {%- set dir_text = states('sensor.bad_nauheim_windrichtung_text') | default('') -%}
    {%- set weight = 1 if wind >= 2 and dir_text in ['S','SE','SW'] else 0.9 -%}
    {%- set uv_factor = 0.8 + (uv_index / 10.0) * 0.4 -%}
    {%- if sicht >= 40 -%}
         {%- set sicht_factor = 1.1 -%}
    {%- elif sicht >= 30 -%}
         {%- set sicht_factor = 1.05 -%}
    {%- elif sicht >= 20 -%}
         {%- set sicht_factor = 1.0 -%}
    {%- elif sicht >= 10 -%}
         {%- set sicht_factor = 0.95 -%}
    {%- else -%}
         {%- set sicht_factor = 0.9 -%}
    {%- endif -%}
    {{ (cloud * weight * sicht_factor * uv_factor) | round(0) }}

# 7. CSRI – WALDEMS-REINBORN (inklusive Validierung)
- name: "CSRI Waldems"
  unit_of_measurement: "%"
  state: >
    {%- set raw_cloud = states('sensor.waldems_reinborn_bewolkungsgrad') | float(0) -%}
    {%- if raw_cloud < 0 or raw_cloud > 100 -%}
      {%- set cloud = 50 -%}
    {%- else -%}
      {%- set cloud = raw_cloud -%}
    {%- endif -%}
    
    {%- set raw_wind = states('sensor.waldems_reinborn_windgeschwindigkeit') | float(0) -%}
    {%- if raw_wind < 0 -%}
      {%- set wind = 0 -%}
    {%- elif raw_wind > 60 -%}
      {%- set wind = 60 -%}
    {%- else -%}
      {%- set wind = raw_wind -%}
    {%- endif -%}
    
    {%- set raw_uv = states('sensor.waldems_reinborn_uv_index') | float(0) -%}
    {%- if raw_uv < 0 or raw_uv > 12 -%}
      {%- set uv_index = 5 -%}
    {%- else -%}
      {%- set uv_index = raw_uv -%}
    {%- endif -%}
    
    {%- set raw_sicht = states('sensor.waldems_reinborn_sichtweite') | float(0) -%}
    {%- if raw_sicht <= 0 -%}
      {%- set sicht = 20 -%}
    {%- else -%}
      {%- set sicht = raw_sicht -%}
    {%- endif -%}
    
    {%- set dir_text = states('sensor.waldems_windrichtung_text') | default('') -%}
    {%- set weight = 1 if wind >= 2 and dir_text in ['S','SE','SW'] else 0.9 -%}
    {%- set uv_factor = 0.8 + (uv_index / 10.0) * 0.4 -%}
    {%- if sicht >= 40 -%}
         {%- set sicht_factor = 1.1 -%}
    {%- elif sicht >= 30 -%}
         {%- set sicht_factor = 1.05 -%}
    {%- elif sicht >= 20 -%}
         {%- set sicht_factor = 1.0 -%}
    {%- elif sicht >= 10 -%}
         {%- set sicht_factor = 0.95 -%}
    {%- else -%}
         {%- set sicht_factor = 0.9 -%}
    {%- endif -%}
    {{ (cloud * weight * sicht_factor * uv_factor) | round(0) }}

#
# --- Teil 3: FINALE CSRI ENTSCHEIDUNG ---
#

# 8. FINALER CSRI – Gewichteter Durchschnitt aller 3 Standorte
#     unter Verwendung exakter geografischer Lage und aktueller Windrichtung
- name: "CSRI"
  unit_of_measurement: "%"
  state: >
    {# Exakte Koordinaten (Dezimalgrad) des zentralen Einspeisepunktes (Oberkleen) #}
    {%- set lat_ob = 50.467 -%}
    {%- set lon_ob = 8.583 -%}
    {# Koordinaten der Standorte #}
    {%- set lat_g = 50.583 -%}
    {%- set lon_g = 8.667 -%}
    {%- set lat_n = 50.3673 -%}
    {%- set lon_n = 8.7394 -%}
    {%- set lat_w = 50.55 -%}
    {%- set lon_w = 8.50 -%}
    {%- set pi = 3.14159 -%}
    {# Berechnung des Umrechnungsfaktors für den Längengrad (km/°) #}
    {%- set cos_ob = (lat_ob * pi / 180) | cos -%}
    
    {# Berechnung der Differenzvektoren (in km) zwischen Oberkleen und den Standorten #}
    {%- set dx_g = (lon_g - lon_ob) * 111 * cos_ob -%}
    {%- set dy_g = (lat_g - lat_ob) * 111 -%}
    {%- set dist_g = (dx_g**2 + dy_g**2) ** 0.5 -%}
    
    {%- set dx_n = (lon_n - lon_ob) * 111 * cos_ob -%}
    {%- set dy_n = (lat_n - lat_ob) * 111 -%}
    {%- set dist_n = (dx_n**2 + dy_n**2) ** 0.5 -%}
    
    {%- set dx_w = (lon_w - lon_ob) * 111 * cos_ob -%}
    {%- set dy_w = (lat_w - lat_ob) * 111 -%}
    {%- set dist_w = (dx_w**2 + dy_w**2) ** 0.5 -%}
    
    {# Normalisierte Vektoren für jeden Standort (Richtung von Oberkleen) #}
    {%- set vec_g = [dx_g/dist_g, dy_g/dist_g] -%}
    {%- set vec_n = [dx_n/dist_n, dy_n/dist_n] -%}
    {%- set vec_w = [dx_w/dist_w, dy_w/dist_w] -%}
    
    {# Aktuelle Windrichtung als Vektor (Sensor: sensor.mein_windrichtung, 0° = Norden) #}
    {%- set wind_deg = states('sensor.mein_windrichtung') | float(0) -%}
    {%- set wind_rad = wind_deg * pi / 180 -%}
    {%- set wind_vector = [ (wind_rad | sin), (wind_rad | cos) ] -%}
    
    {# Berechnung der Dot-Produkte (Einflussfaktor) #}
    {%- set dot_g = (vec_g[0]*wind_vector[0] + vec_g[1]*wind_vector[1]) -%}
    {%- set dot_n = (vec_n[0]*wind_vector[0] + vec_n[1]*wind_vector[1]) -%}
    {%- set dot_w = (vec_w[0]*wind_vector[0] + vec_w[1]*wind_vector[1]) -%}
    
    {# Negative Werte (wenn der Standort nicht in Windrichtung liegt) werden auf 0 gesetzt #}
    {%- set factor_g = dot_g if dot_g > 0 else 0 -%}
    {%- set factor_n = dot_n if dot_n > 0 else 0 -%}
    {%- set factor_w = dot_w if dot_w > 0 else 0 -%}
    
    {%- set total_factor = factor_g + factor_n + factor_w -%}
    {%- if total_factor > 0 -%}
      {%- set wp_weighted = ((states('sensor.CSRI_giessen') | float(0)) * factor_g +
                              (states('sensor.CSRI_bad_nauheim') | float(0)) * factor_n +
                              (states('sensor.CSRI_waldems') | float(0)) * factor_w) / total_factor -%}
    {%- else -%}
      {%- set wp_weighted = ((states('sensor.CSRI_giessen') | float(0)) +
                              (states('sensor.CSRI_bad_nauheim') | float(0)) +
                              (states('sensor.CSRI_waldems') | float(0))) / 3 -%}
    {%- endif -%}
    
    {%- set season = states('sensor.csri_saisonfaktor') | float(0) -%}
    {{ (wp_weighted * season) | round(0) }}

# 9. ENTSCHEIDUNG – Entscheidungstext basierend auf dem finalen CSRI und
#    Konsistenz der Winddaten (bei Differenzen > 30° wird der WP-Wert um 5 Punkte **erhöht**,
#    um unsichere Daten als ungünstig zu werten)
- name: "WP Entscheidung"
  state: >
    {% if not is_state('sun.sun', 'above_horizon') %}
      "NEIN – Nachtzeit, keine Einspeisung"
    {% else %}
      {%- set final_prob = states('sensor.CSRI') | float(0) -%}
      {%- set ws_g = states('sensor.giessen_windgeschwindigkeit') | float(0) -%}
      {%- set ws_n = states('sensor.bad_nauheim_windgeschwindigkeit') | float(0) -%}
      {%- set ws_w = states('sensor.waldems_reinborn_windgeschwindigkeit') | float(0) -%}
      {%- set wd_g = states('sensor.giessen_windrichtung') | float(0) -%}
      {%- set wd_n = states('sensor.bad_nauheim_windrichtung') | float(0) -%}
      {%- set wd_w = states('sensor.waldems_reinborn_windrichtung') | float(0) -%}
      {%- set wd_diff_g_n = (((wd_g - wd_n + 180) % 360) - 180) | abs -%}
      {%- set wd_diff_g_w = (((wd_g - wd_w + 180) % 360) - 180) | abs -%}
      {%- set wd_diff_n_w = (((wd_n - wd_w + 180) % 360) - 180) | abs -%}
      {%- set max_diff = [wd_diff_g_n, wd_diff_g_w, wd_diff_n_w] | max -%}
      {%- set tolerance = 30 -%}
      {%- set ambiguous = false -%}
      {%- if ws_g >= 2 and ws_n >= 2 and ws_w >= 2 -%}
         {%- if max_diff >= tolerance -%}
              {%- set ambiguous = true -%}
         {%- endif -%}
      {%- endif -%}
      {# Bei unsicheren Daten (ambiguous == true) wird der finale CSRI um 5 Punkte hinzugefügt #}
      {%- set adjusted = final_prob + (5 if ambiguous else 0) -%}
      {%- if adjusted < 40 -%}
        {%- if ambiguous -%}
          "JA – (unsicher) Solarbedingungen günstig"
        {%- else -%}
          "JA – Solarbedingungen günstig"
        {%- endif -%}
      {%- elif adjusted < 70 -%}
        {%- if ambiguous -%}
          "MODERAT – (unsicher) Bedingt empfehlenswert"
        {%- else -%}
          "MODERAT – Bedingt empfehlenswert"
        {%- endif -%}
      {%- else -%}
        {%- if ambiguous -%}
          "NEIN – (unsicher) Solarbedingungen ungünstig"
        {%- else -%}
          "NEIN – Solarbedingungen ungünstig"
        {%- endif -%}
      {%- endif -%}
    {% endif %}

# 10. WP ENTSCHEIDUNGSBEGRÜNDUNG KURZ – Kurze Zusammenfassung
- name: "WP Entscheidungsbegründung Kurz"
  state: >
    {% if not is_state('sun.sun', 'above_horizon') %}
      "Nachtzeit – keine Solarstrahlung"
    {% else %}
      {%- set final_prob = states('sensor.CSRI') | float(0) -%}
      {%- set wp_decision = states('sensor.wp_entscheidung') | default("Keine Entscheidung") -%}
      "WP: " ~ wp_decision ~ ", SW: " ~ (final_prob|round(0)|string) ~ "%"
    {% endif %}

# 11. WP ENTSCHEIDUNGSBEGRÜNDUNG LANG – Ausführliche Begründung (max. 255 Zeichen)
- name: "WP Entscheidungsbegründung Lang"
  state: >
    {% if not is_state('sun.sun', 'above_horizon') %}
      "Kein Tageslicht – keine Einspeisung."
    {% else %}
      {%- set final_prob = states('sensor.CSRI') | float(0) -%}
      {%- set giessen_cloud = states('sensor.giessen_bewolkungsgrad') | float(0) -%}
      {%- set nauheim_cloud = states('sensor.bad_nauheim_bewolkungsgrad') | float(0) -%}
      {%- set waldems_cloud = states('sensor.waldems_reinborn_bewolkungsgrad') | float(0) -%}
      {%- set faktor = states('sensor.csri_saisonfaktor') | float(0) -%}
      {%- set giessen_wind = states('sensor.giessen_windgeschwindigkeit') | float(0) -%}
      {%- set giessen_wind_dir = states('sensor.giessen_windrichtung_text') | default("unb") -%}
      {%- set nauheim_wind = states('sensor.bad_nauheim_windgeschwindigkeit') | float(0) -%}
      {%- set nauheim_wind_dir = states('sensor.bad_nauheim_windrichtung_text') | default("unb") -%}
      {%- set waldems_wind = states('sensor.waldems_reinborn_windgeschwindigkeit') | float(0) -%}
      {%- set waldems_wind_dir = states('sensor.waldems_windrichtung_text') | default("unb") -%}
      {%- set sicht_g = states('sensor.giessen_sichtweite') | float(0) -%}
      {%- if sicht_g >= 40 -%}{%- set sf_g = 1.1 -%}{%- elif sicht_g >= 30 -%}{%- set sf_g = 1.05 -%}{%- elif sicht_g >= 20 -%}{%- set sf_g = 1.0 -%}{%- elif sicht_g >= 10 -%}{%- set sf_g = 0.95 -%}{%- else -%}{%- set sf_g = 0.9 -%}{%- endif -%}
      {%- set sicht_n = states('sensor.bad_nauheim_sichtweite') | float(0) -%}
      {%- if sicht_n >= 40 -%}{%- set sf_n = 1.1 -%}{%- elif sicht_n >= 30 -%}{%- set sf_n = 1.05 -%}{%- elif sicht_n >= 20 -%}{%- set sf_n = 1.0 -%}{%- elif sicht_n >= 10 -%}{%- set sf_n = 0.95 -%}{%- else -%}{%- set sf_n = 0.9 -%}{%- endif -%}
      {%- set sicht_w = states('sensor.waldems_reinborn_sichtweite') | float(0) -%}
      {%- if sicht_w >= 40 -%}{%- set sf_w = 1.1 -%}{%- elif sicht_w >= 30 -%}{%- set sf_w = 1.05 -%}{%- elif sicht_w >= 20 -%}{%- set sf_w = 1.0 -%}{%- elif sicht_w >= 10 -%}{%- set sf_w = 0.95 -%}{%- else -%}{%- set sf_w = 0.9 -%}{%- endif -%}
      {%- set sf_avg = ((sf_g + sf_n + sf_w) / 3) | round(2) -%}
      {%- set output = "CSRI: " ~ final_prob|string ~ "%, Giessen Bewölk-Grad: " ~ giessen_cloud|string ~ 
            "%, Bad Nauheim Bewölk-Grad: " ~ nauheim_cloud|string ~ "%, Waldems Bewölk-Grad: " ~ waldems_cloud|string ~ 
            "%, Giessen Wind: " ~ giessen_wind|round(1)|string ~ " m/s (" ~ giessen_wind_dir ~ 
            "), Bad Nauheim Wind: " ~ nauheim_wind|round(1)|string ~ " m/s (" ~ nauheim_wind_dir ~ 
            "), Waldems Wind: " ~ waldems_wind|round(1)|string ~ " m/s (" ~ waldems_wind_dir ~ 
            "), Faktor: " ~ faktor|round(2)|string ~ ", Bonus: " ~ sf_avg|string %}
      {{ output[:255] }}
    {% endif %}

#
# --- Teil 12: WP PARAMETER HINWEIS & WINDRICHTUNG OBERKLEEN ---
#

# 12. WP PARAMETER HINWEIS – inkl. Bonus Ø und Dominanzreihenfolge
- name: "WP Parameter Hinweis"
  state: >
    {% if not is_state('sun.sun', 'above_horizon') %}
      "Nacht – Winddaten irrelevant."
    {% else %}
      {# Zunächst die bereits vorhandenen Werte für Wind und Sichtweite ermitteln #}
      {%- set ws_g = states('sensor.giessen_windgeschwindigkeit') | float(0) -%}
      {%- set ws_n = states('sensor.bad_nauheim_windgeschwindigkeit') | float(0) -%}
      {%- set ws_w = states('sensor.waldems_reinborn_windgeschwindigkeit') | float(0) -%}
      
      {# Hier werden die geografischen Parameter für die Vektorberechnung definiert #}
      {%- set pi = 3.14159 -%}
      {%- set lat_ob = 50.467 -%}
      {%- set lon_ob = 8.583 -%}
      {%- set lat_g = 50.583 -%}
      {%- set lon_g = 8.667 -%}
      {%- set lat_n = 50.3673 -%}
      {%- set lon_n = 8.7394 -%}
      {%- set lat_w = 50.55 -%}
      {%- set lon_w = 8.50 -%}
      {%- set cos_ob = (lat_ob * pi / 180) | cos -%}
      
      {# Für Giessen #}
      {%- set dx_g = (lon_g - lon_ob) * 111 * cos_ob -%}
      {%- set dy_g = (lat_g - lat_ob) * 111 -%}
      {%- set dist_g = (dx_g**2 + dy_g**2) ** 0.5 -%}
      {%- set vec_g = [dx_g/dist_g, dy_g/dist_g] -%}
      
      {# Für Bad Nauheim #}
      {%- set dx_n = (lon_n - lon_ob) * 111 * cos_ob -%}
      {%- set dy_n = (lat_n - lat_ob) * 111 -%}
      {%- set dist_n = (dx_n**2 + dy_n**2) ** 0.5 -%}
      {%- set vec_n = [dx_n/dist_n, dy_n/dist_n] -%}
      
      {# Für Waldems #}
      {%- set dx_w = (lon_w - lon_ob) * 111 * cos_ob -%}
      {%- set dy_w = (lat_w - lat_ob) * 111 -%}
      {%- set dist_w = (dx_w**2 + dy_w**2) ** 0.5 -%}
      {%- set vec_w = [dx_w/dist_w, dy_w/dist_w] -%}
      
      {# Aktuelle Windrichtung (gemessen an sensor.mein_windrichtung; 0° = Norden) in einen Vektor umrechnen #}
      {%- set wind_deg = states('sensor.mein_windrichtung') | float(0) -%}
      {%- set wind_rad = wind_deg * pi / 180 -%}
      {%- set wind_vector = [ (wind_rad | sin), (wind_rad | cos) ] -%}
      
      {# Einflussfaktoren als Dot-Produkte berechnen #}
      {%- set dot_g = (vec_g[0]*wind_vector[0] + vec_g[1]*wind_vector[1]) -%}
      {%- set dot_n = (vec_n[0]*wind_vector[0] + vec_n[1]*wind_vector[1]) -%}
      {%- set dot_w = (vec_w[0]*wind_vector[0] + vec_w[1]*wind_vector[1]) -%}
      {%- set factor_g = dot_g if dot_g > 0 else 0 -%}
      {%- set factor_n = dot_n if dot_n > 0 else 0 -%}
      {%- set factor_w = dot_w if dot_w > 0 else 0 -%}
      
      {# Ermittlung der Rangfolge. Da es nur drei Werte gibt, erfolgt eine manuelle Sortierung #}
      {%- set a = factor_g -%}
      {%- set b = factor_n -%}
      {%- set c = factor_w -%}
      {%- if a >= b and a >= c -%}
            {%- set first = 'Giessen (' ~ a | round(2) ~ ')' -%}
            {%- if b >= c -%}
                  {%- set second = 'Bad Nauheim (' ~ b | round(2) ~ ')' -%}
                  {%- set third = 'Waldems (' ~ c | round(2) ~ ')' -%}
            {%- else -%}
                  {%- set second = 'Waldems (' ~ c | round(2) ~ ')' -%}
                  {%- set third = 'Bad Nauheim (' ~ b | round(2) ~ ')' -%}
            {%- endif -%}
      {%- elif b >= a and b >= c -%}
            {%- set first = 'Bad Nauheim (' ~ b | round(2) ~ ')' -%}
            {%- if a >= c -%}
                  {%- set second = 'Giessen (' ~ a | round(2) ~ ')' -%}
                  {%- set third = 'Waldems (' ~ c | round(2) ~ ')' -%}
            {%- else -%}
                  {%- set second = 'Waldems (' ~ c | round(2) ~ ')' -%}
                  {%- set third = 'Giessen (' ~ a | round(2) ~ ')' -%}
            {%- endif -%}
      {%- else -%}
            {%- set first = 'Waldems (' ~ c | round(2) ~ ')' -%}
            {%- if a >= b -%}
                  {%- set second = 'Giessen (' ~ a | round(2) ~ ')' -%}
                  {%- set third = 'Bad Nauheim (' ~ b | round(2) ~ ')' -%}
            {%- else -%}
                  {%- set second = 'Bad Nauheim (' ~ b | round(2) ~ ')' -%}
                  {%- set third = 'Giessen (' ~ a | round(2) ~ ')' -%}
            {%- endif -%}
      {%- endif -%}
      {%- set ranking = "Dominanz: " ~ first ~ " > " ~ second ~ " > " ~ third -%}
      
      {# Zusätzlich werden vorhandene Sicht- und Bonusfaktoren ermittelt (wie bisher) #}
      {%- set raw_sf_g = states('sensor.giessen_sichtweite') | float(0) -%}
      {%- if raw_sf_g >= 40 -%}
         {%- set sf_g = 1.1 -%}
      {%- elif raw_sf_g >= 30 -%}
         {%- set sf_g = 1.05 -%}
      {%- elif raw_sf_g >= 20 -%}
         {%- set sf_g = 1.0 -%}
      {%- elif raw_sf_g >= 10 -%}
         {%- set sf_g = 0.95 -%}
      {%- else -%}
         {%- set sf_g = 0.9 -%}
      {%- endif -%}
      {%- set raw_sf_n = states('sensor.bad_nauheim_sichtweite') | float(0) -%}
      {%- if raw_sf_n >= 40 -%}
         {%- set sf_n = 1.1 -%}
      {%- elif raw_sf_n >= 30 -%}
         {%- set sf_n = 1.05 -%}
      {%- elif raw_sf_n >= 20 -%}
         {%- set sf_n = 1.0 -%}
      {%- elif raw_sf_n >= 10 -%}
         {%- set sf_n = 0.95 -%}
      {%- else -%}
         {%- set sf_n = 0.9 -%}
      {%- endif -%}
      {%- set raw_sf_w = states('sensor.waldems_reinborn_sichtweite') | float(0) -%}
      {%- if raw_sf_w >= 40 -%}
         {%- set sf_w = 1.1 -%}
      {%- elif raw_sf_w >= 30 -%}
         {%- set sf_w = 1.05 -%}
      {%- elif raw_sf_w >= 20 -%}
         {%- set sf_w = 1.0 -%}
      {%- elif raw_sf_w >= 10 -%}
         {%- set sf_w = 0.95 -%}
      {%- else -%}
         {%- set sf_w = 0.9 -%}
      {%- endif -%}
      {%- set sf_avg = ((sf_g + sf_n + sf_w) / 3) | round(2) -%}
      
      {# Bestehende Logik zur Bewertung der Windkonsistenz #}
      {%- set wd_g = states('sensor.giessen_windrichtung') | float(0) -%}
      {%- set wd_n = states('sensor.bad_nauheim_windrichtung') | float(0) -%}
      {%- set wd_w = states('sensor.waldems_reinborn_windrichtung') | float(0) -%}
      {%- set wd_diff_g_n = (((wd_g - wd_n + 180) % 360) - 180) | abs -%}
      {%- set wd_diff_g_w = (((wd_g - wd_w + 180) % 360) - 180) | abs -%}
      {%- set wd_diff_n_w = (((wd_n - wd_w + 180) % 360) - 180) | abs -%}
      {%- set max_diff = [wd_diff_g_n, wd_diff_g_w, wd_diff_n_w] | max -%}
      {%- set tolerance = 30 -%}
      {%- if ws_g < 2 and ws_n < 2 and ws_w < 2 -%}
           {%- set output = "Wind zu schwach. Bonus Ø: " ~ sf_avg -%}
      {%- else -%}
           {%- if max_diff < tolerance -%}
                {%- set output = "Wind konsistent, Bonus Ø: " ~ sf_avg -%}
           {%- else -%}
                {%- set output = "Max. Winddifferenz: " ~ (max_diff | round(0)) ~ "°, Bonus Ø: " ~ sf_avg -%}
           {%- endif -%}
      {%- endif -%}
      
      {# Die Dominanz-Rangfolge wird an den bisherigen Hinweis angehängt #}
      {{ output ~ " | " ~ ranking }}
    {% endif %}

# 13. WINDRICHTUNG OBERKLEEN – Durchschnittlicher Windrichtungstext aus allen Standorten
- name: "Windrichtung Oberkleen"
  state: >
    {%- set wd_g = states('sensor.giessen_windrichtung') | float(0) -%}
    {%- set wd_n = states('sensor.bad_nauheim_windrichtung') | float(0) -%}
    {%- set wd_w = states('sensor.waldems_reinborn_windrichtung') | float(0) -%}
    {%- set avg_wind = ((wd_g + wd_n + wd_w) / 3) | round(0) -%}
    {%- if avg_wind >= 337.5 or avg_wind < 22.5 -%}
      N
    {%- elif avg_wind < 67.5 -%}
      NE
    {%- elif avg_wind < 112.5 -%}
      E
    {%- elif avg_wind < 157.5 -%}
      SE
    {%- elif avg_wind < 202.5 -%}
      S
    {%- elif avg_wind < 247.5 -%}
      SW
    {%- elif avg_wind < 292.5 -%}
      W
    {%- else -%}
      NW
    {%- endif %}
